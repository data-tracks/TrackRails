name: ðŸ“œ Protocol Release
permissions:
  "contents": "write"

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version'
        required: true
        type: string
      description:
        description: 'Description Text'
        required: false
        type: string
        default: ""

jobs:
  generate-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install flatc
        uses: Nugine/setup-flatc@v1
        with:
          version: "24.3.25"

      - name: Read version from file
        id: get_version
        run: |
          echo "VERSION=$(cat VERSION)" >> "$GITHUB_OUTPUT" # Reads VERSION file and sets it as an output


      - name: Generate Java code from FlatBuffers
        run: |
          mkdir -p generated/java
          flatc --java -o generated/java schemas/message.fbs
          

      - name: Generate TypeScript code from FlatBuffers
        run: |
          mkdir -p generated/ts/src
          flatc --ts -o generated/ts/src/ schemas/message.fbs

      - name: Create package.json
        run: |
          VERSION_NUMBER="${{ steps.get_version.outputs.VERSION }}"
          cat <<EOL > package.json
          {
            "name": "trackrails",
            "version": $VERSION_NUMBER,
            "description": "TrackRails TypeScript for DataTracks",
            "main": "generated/ts/src/protocol.ts",
            "types": "generated/ts/src/protocol.ts",
            "repository": {
              "type": "git",
              "url": "https://github.com/data-tracks/TrackRails.git"
            },
            "license": "GPLv3"
          }

      - name: Generate Rust code from FlatBuffers
        run: |
          mkdir -p generated/rust/src
          flatc --rust -o generated/rust/src/ schemas/message.fbs

      - name: Create Cargo.toml and increment version for Rust Code
        run: |
          VERSION_NUMBER="${{ steps.get_version.outputs.VERSION }}"
          ## Create Cargo 
          cat <<EOL > generated/rust/Cargo.toml
          [package]
          name = "track-rails"
          version = "$VERSION_NUMBER"
          authors = ["David Lengweiler <dave.lengw@gmail.com>"]
          description = "Rust Version of TrackRails Protocol."
          homepage = "https://github.com/data-tracks/TrackRails"
          repository = "https://github.com/data-tracks/TrackRails"
          keywords = ["stream", "data", "processing", "protocol"]
          license = "GPL-3.0-only"
          edition = "2024"
          readme = "README.md"

          [dependencies]
          flatbuffers = "25.2.10"
          
          [lib]
          path = "src/lib.rs" 
          version = "$VERSION_NUMBER"

          [build-dependencies]
          flatbuffers = "25.2.10"
          EOL
      - name: Create Cargo.toml for Rust Code
        run: |
          cat <<EOL > generated/rust/README.md
          # ðŸš‚ TrackRails 
          ## DataTracks Communication Protocol 
  
          This crate contains the communication protocol for **DataTracks** using **FlatBuffers** for fast, efficient, and cross-platform data serialization.
          EOL

      - name: Create lib.rs for Rust code
        run: |
          mkdir -p generated/rust/src
          cat <<EOL > generated/rust/src/lib.rs
          pub mod message_generated;
          EOL

      - name: Commit generated code
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git add generated/
          git add package.json
          git commit -m "Update generated code ${GITHUB_EVENT_INPUTS_VERSION}"

      - name: Push generated code to branch
        run: |
          git push origin HEAD:refs/heads/generated --force
