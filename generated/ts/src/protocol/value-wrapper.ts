// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Value, unionToValue, unionListToValue } from '../protocol/value.js';


export class ValueWrapper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ValueWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsValueWrapper(bb:flatbuffers.ByteBuffer, obj?:ValueWrapper):ValueWrapper {
  return (obj || new ValueWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsValueWrapper(bb:flatbuffers.ByteBuffer, obj?:ValueWrapper):ValueWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ValueWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dataType():Value {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Value.NONE;
}

data<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startValueWrapper(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDataType(builder:flatbuffers.Builder, dataType:Value) {
  builder.addFieldInt8(0, dataType, Value.NONE);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
}

static endValueWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // data
  return offset;
}

static createValueWrapper(builder:flatbuffers.Builder, dataType:Value, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  ValueWrapper.startValueWrapper(builder);
  ValueWrapper.addDataType(builder, dataType);
  ValueWrapper.addData(builder, dataOffset);
  return ValueWrapper.endValueWrapper(builder);
}
}
