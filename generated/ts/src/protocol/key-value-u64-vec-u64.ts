// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class KeyValueU64VecU64 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):KeyValueU64VecU64 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKeyValueU64VecU64(bb:flatbuffers.ByteBuffer, obj?:KeyValueU64VecU64):KeyValueU64VecU64 {
  return (obj || new KeyValueU64VecU64()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKeyValueU64VecU64(bb:flatbuffers.ByteBuffer, obj?:KeyValueU64VecU64):KeyValueU64VecU64 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KeyValueU64VecU64()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

value(index: number):bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
}

valueLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startKeyValueU64VecU64(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, key:bigint) {
  builder.addFieldInt64(0, key, BigInt('0'));
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static createValueVector(builder:flatbuffers.Builder, data:bigint[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]!);
  }
  return builder.endVector();
}

static startValueVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

static endKeyValueU64VecU64(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createKeyValueU64VecU64(builder:flatbuffers.Builder, key:bigint, valueOffset:flatbuffers.Offset):flatbuffers.Offset {
  KeyValueU64VecU64.startKeyValueU64VecU64(builder);
  KeyValueU64VecU64.addKey(builder, key);
  KeyValueU64VecU64.addValue(builder, valueOffset);
  return KeyValueU64VecU64.endKeyValueU64VecU64(builder);
}
}
