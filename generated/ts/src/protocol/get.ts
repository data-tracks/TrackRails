// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GetType, unionToGetType, unionListToGetType } from '../protocol/get-type.js';


export class Get {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Get {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGet(bb:flatbuffers.ByteBuffer, obj?:Get):Get {
  return (obj || new Get()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGet(bb:flatbuffers.ByteBuffer, obj?:Get):Get {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Get()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

getTypeType():GetType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : GetType.NONE;
}

getType<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startGet(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addGetTypeType(builder:flatbuffers.Builder, getTypeType:GetType) {
  builder.addFieldInt8(0, getTypeType, GetType.NONE);
}

static addGetType(builder:flatbuffers.Builder, getTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, getTypeOffset, 0);
}

static endGet(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGet(builder:flatbuffers.Builder, getTypeType:GetType, getTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  Get.startGet(builder);
  Get.addGetTypeType(builder, getTypeType);
  Get.addGetType(builder, getTypeOffset);
  return Get.endGet(builder);
}
}
