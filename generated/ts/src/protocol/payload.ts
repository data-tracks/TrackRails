// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { BindRequest } from '../protocol/bind-request.js';
import { BindResponse } from '../protocol/bind-response.js';
import { Catalog } from '../protocol/catalog.js';
import { Create } from '../protocol/create.js';
import { Get } from '../protocol/get.js';
import { RegisterRequest } from '../protocol/register-request.js';
import { RegisterResponse } from '../protocol/register-response.js';
import { Train } from '../protocol/train.js';
import { UnbindRequest } from '../protocol/unbind-request.js';
import { UnbindResponse } from '../protocol/unbind-response.js';


export enum Payload {
  NONE = 0,
  Create = 1,
  Get = 2,
  Train = 3,
  Catalog = 4,
  RegisterRequest = 5,
  RegisterResponse = 6,
  BindRequest = 7,
  BindResponse = 8,
  UnbindRequest = 9,
  UnbindResponse = 10
}

export function unionToPayload(
  type: Payload,
  accessor: (obj:BindRequest|BindResponse|Catalog|Create|Get|RegisterRequest|RegisterResponse|Train|UnbindRequest|UnbindResponse) => BindRequest|BindResponse|Catalog|Create|Get|RegisterRequest|RegisterResponse|Train|UnbindRequest|UnbindResponse|null
): BindRequest|BindResponse|Catalog|Create|Get|RegisterRequest|RegisterResponse|Train|UnbindRequest|UnbindResponse|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'Create': return accessor(new Create())! as Create;
    case 'Get': return accessor(new Get())! as Get;
    case 'Train': return accessor(new Train())! as Train;
    case 'Catalog': return accessor(new Catalog())! as Catalog;
    case 'RegisterRequest': return accessor(new RegisterRequest())! as RegisterRequest;
    case 'RegisterResponse': return accessor(new RegisterResponse())! as RegisterResponse;
    case 'BindRequest': return accessor(new BindRequest())! as BindRequest;
    case 'BindResponse': return accessor(new BindResponse())! as BindResponse;
    case 'UnbindRequest': return accessor(new UnbindRequest())! as UnbindRequest;
    case 'UnbindResponse': return accessor(new UnbindResponse())! as UnbindResponse;
    default: return null;
  }
}

export function unionListToPayload(
  type: Payload, 
  accessor: (index: number, obj:BindRequest|BindResponse|Catalog|Create|Get|RegisterRequest|RegisterResponse|Train|UnbindRequest|UnbindResponse) => BindRequest|BindResponse|Catalog|Create|Get|RegisterRequest|RegisterResponse|Train|UnbindRequest|UnbindResponse|null, 
  index: number
): BindRequest|BindResponse|Catalog|Create|Get|RegisterRequest|RegisterResponse|Train|UnbindRequest|UnbindResponse|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'Create': return accessor(index, new Create())! as Create;
    case 'Get': return accessor(index, new Get())! as Get;
    case 'Train': return accessor(index, new Train())! as Train;
    case 'Catalog': return accessor(index, new Catalog())! as Catalog;
    case 'RegisterRequest': return accessor(index, new RegisterRequest())! as RegisterRequest;
    case 'RegisterResponse': return accessor(index, new RegisterResponse())! as RegisterResponse;
    case 'BindRequest': return accessor(index, new BindRequest())! as BindRequest;
    case 'BindResponse': return accessor(index, new BindResponse())! as BindResponse;
    case 'UnbindRequest': return accessor(index, new UnbindRequest())! as UnbindRequest;
    case 'UnbindResponse': return accessor(index, new UnbindResponse())! as UnbindResponse;
    default: return null;
  }
}
