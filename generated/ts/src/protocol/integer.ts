// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Integer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Integer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInteger(bb:flatbuffers.ByteBuffer, obj?:Integer):Integer {
  return (obj || new Integer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInteger(bb:flatbuffers.ByteBuffer, obj?:Integer):Integer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Integer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

data():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startInteger(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addData(builder:flatbuffers.Builder, data:bigint) {
  builder.addFieldInt64(0, data, BigInt('0'));
}

static endInteger(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createInteger(builder:flatbuffers.Builder, data:bigint):flatbuffers.Offset {
  Integer.startInteger(builder);
  Integer.addData(builder, data);
  return Integer.endInteger(builder);
}
}
