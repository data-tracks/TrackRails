// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ErrorStatus {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ErrorStatus {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsErrorStatus(bb:flatbuffers.ByteBuffer, obj?:ErrorStatus):ErrorStatus {
  return (obj || new ErrorStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsErrorStatus(bb:flatbuffers.ByteBuffer, obj?:ErrorStatus):ErrorStatus {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ErrorStatus()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

code():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

msg():string|null
msg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
msg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startErrorStatus(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCode(builder:flatbuffers.Builder, code:number) {
  builder.addFieldInt32(0, code, 0);
}

static addMsg(builder:flatbuffers.Builder, msgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, msgOffset, 0);
}

static endErrorStatus(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // msg
  return offset;
}

static createErrorStatus(builder:flatbuffers.Builder, code:number, msgOffset:flatbuffers.Offset):flatbuffers.Offset {
  ErrorStatus.startErrorStatus(builder);
  ErrorStatus.addCode(builder, code);
  ErrorStatus.addMsg(builder, msgOffset);
  return ErrorStatus.endErrorStatus(builder);
}
}
