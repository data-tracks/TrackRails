// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CreateType, unionToCreateType, unionListToCreateType } from '../protocol/create-type.js';


export class Create {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Create {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCreate(bb:flatbuffers.ByteBuffer, obj?:Create):Create {
  return (obj || new Create()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCreate(bb:flatbuffers.ByteBuffer, obj?:Create):Create {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Create()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

createTypeType():CreateType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : CreateType.NONE;
}

createType<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startCreate(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCreateTypeType(builder:flatbuffers.Builder, createTypeType:CreateType) {
  builder.addFieldInt8(0, createTypeType, CreateType.NONE);
}

static addCreateType(builder:flatbuffers.Builder, createTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, createTypeOffset, 0);
}

static endCreate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCreate(builder:flatbuffers.Builder, createTypeType:CreateType, createTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  Create.startCreate(builder);
  Create.addCreateTypeType(builder, createTypeType);
  Create.addCreateType(builder, createTypeOffset);
  return Create.endCreate(builder);
}
}
