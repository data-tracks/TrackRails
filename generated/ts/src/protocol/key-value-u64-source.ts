// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Source } from '../protocol/source.js';


export class KeyValueU64Source {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):KeyValueU64Source {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsKeyValueU64Source(bb:flatbuffers.ByteBuffer, obj?:KeyValueU64Source):KeyValueU64Source {
  return (obj || new KeyValueU64Source()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsKeyValueU64Source(bb:flatbuffers.ByteBuffer, obj?:KeyValueU64Source):KeyValueU64Source {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new KeyValueU64Source()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

value(obj?:Source):Source|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Source()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startKeyValueU64Source(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addKey(builder:flatbuffers.Builder, key:bigint) {
  builder.addFieldInt64(0, key, BigInt('0'));
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static endKeyValueU64Source(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // value
  return offset;
}

}
