// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FilterType, unionToFilterType, unionListToFilterType } from '../protocol/filter-type.js';


export class Filter {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Filter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFilter(bb:flatbuffers.ByteBuffer, obj?:Filter):Filter {
  return (obj || new Filter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFilter(bb:flatbuffers.ByteBuffer, obj?:Filter):Filter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Filter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

filterTypeType():FilterType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : FilterType.NONE;
}

filterType<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startFilter(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFilterTypeType(builder:flatbuffers.Builder, filterTypeType:FilterType) {
  builder.addFieldInt8(0, filterTypeType, FilterType.NONE);
}

static addFilterType(builder:flatbuffers.Builder, filterTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, filterTypeOffset, 0);
}

static endFilter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFilter(builder:flatbuffers.Builder, filterTypeType:FilterType, filterTypeOffset:flatbuffers.Offset):flatbuffers.Offset {
  Filter.startFilter(builder);
  Filter.addFilterTypeType(builder, filterTypeType);
  Filter.addFilterType(builder, filterTypeOffset);
  return Filter.endFilter(builder);
}
}
