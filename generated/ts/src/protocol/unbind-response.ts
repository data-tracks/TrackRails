// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class UnbindResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UnbindResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUnbindResponse(bb:flatbuffers.ByteBuffer, obj?:UnbindResponse):UnbindResponse {
  return (obj || new UnbindResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUnbindResponse(bb:flatbuffers.ByteBuffer, obj?:UnbindResponse):UnbindResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UnbindResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

planId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

stopId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startUnbindResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPlanId(builder:flatbuffers.Builder, planId:bigint) {
  builder.addFieldInt64(0, planId, BigInt('0'));
}

static addStopId(builder:flatbuffers.Builder, stopId:bigint) {
  builder.addFieldInt64(1, stopId, BigInt('0'));
}

static endUnbindResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUnbindResponse(builder:flatbuffers.Builder, planId:bigint, stopId:bigint):flatbuffers.Offset {
  UnbindResponse.startUnbindResponse(builder);
  UnbindResponse.addPlanId(builder, planId);
  UnbindResponse.addStopId(builder, stopId);
  return UnbindResponse.endUnbindResponse(builder);
}
}
