// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { KeyValueStringTransform } from '../protocol/key-value-string-transform.js';
import { KeyValueU64Destination } from '../protocol/key-value-u64-destination.js';
import { KeyValueU64Source } from '../protocol/key-value-u64-source.js';
import { KeyValueU64Station } from '../protocol/key-value-u64-station.js';
import { KeyValueU64VecU64 } from '../protocol/key-value-u64-vec-u64.js';
import { PlanStatus } from '../protocol/plan-status.js';


export class Plan {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Plan {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPlan(bb:flatbuffers.ByteBuffer, obj?:Plan):Plan {
  return (obj || new Plan()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPlan(bb:flatbuffers.ByteBuffer, obj?:Plan):Plan {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Plan()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

template():string|null
template(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
template(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lines(index: number, obj?:KeyValueU64VecU64):KeyValueU64VecU64|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new KeyValueU64VecU64()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

linesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stations(index: number, obj?:KeyValueU64Station):KeyValueU64Station|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new KeyValueU64Station()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

stationsToInOuts(index: number, obj?:KeyValueU64VecU64):KeyValueU64VecU64|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new KeyValueU64VecU64()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

stationsToInOutsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

sources(index: number, obj?:KeyValueU64Source):KeyValueU64Source|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new KeyValueU64Source()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

sourcesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

destinations(index: number, obj?:KeyValueU64Destination):KeyValueU64Destination|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new KeyValueU64Destination()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

destinationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

status():PlanStatus {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PlanStatus.Running;
}

transforms(index: number, obj?:KeyValueStringTransform):KeyValueStringTransform|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new KeyValueStringTransform()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

transformsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPlan(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addId(builder:flatbuffers.Builder, id:bigint) {
  builder.addFieldInt64(0, id, BigInt('0'));
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addTemplate(builder:flatbuffers.Builder, templateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, templateOffset, 0);
}

static addLines(builder:flatbuffers.Builder, linesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, linesOffset, 0);
}

static createLinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStations(builder:flatbuffers.Builder, stationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, stationsOffset, 0);
}

static createStationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStationsToInOuts(builder:flatbuffers.Builder, stationsToInOutsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, stationsToInOutsOffset, 0);
}

static createStationsToInOutsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStationsToInOutsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSources(builder:flatbuffers.Builder, sourcesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, sourcesOffset, 0);
}

static createSourcesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSourcesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDestinations(builder:flatbuffers.Builder, destinationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, destinationsOffset, 0);
}

static createDestinationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDestinationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStatus(builder:flatbuffers.Builder, status:PlanStatus) {
  builder.addFieldInt8(8, status, PlanStatus.Running);
}

static addTransforms(builder:flatbuffers.Builder, transformsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, transformsOffset, 0);
}

static createTransformsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTransformsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPlan(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPlan(builder:flatbuffers.Builder, id:bigint, nameOffset:flatbuffers.Offset, templateOffset:flatbuffers.Offset, linesOffset:flatbuffers.Offset, stationsOffset:flatbuffers.Offset, stationsToInOutsOffset:flatbuffers.Offset, sourcesOffset:flatbuffers.Offset, destinationsOffset:flatbuffers.Offset, status:PlanStatus, transformsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Plan.startPlan(builder);
  Plan.addId(builder, id);
  Plan.addName(builder, nameOffset);
  Plan.addTemplate(builder, templateOffset);
  Plan.addLines(builder, linesOffset);
  Plan.addStations(builder, stationsOffset);
  Plan.addStationsToInOuts(builder, stationsToInOutsOffset);
  Plan.addSources(builder, sourcesOffset);
  Plan.addDestinations(builder, destinationsOffset);
  Plan.addStatus(builder, status);
  Plan.addTransforms(builder, transformsOffset);
  return Plan.endPlan(builder);
}
}
