// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class CreatePlanRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CreatePlanRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCreatePlanRequest(bb:flatbuffers.ByteBuffer, obj?:CreatePlanRequest):CreatePlanRequest {
  return (obj || new CreatePlanRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCreatePlanRequest(bb:flatbuffers.ByteBuffer, obj?:CreatePlanRequest):CreatePlanRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CreatePlanRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

plan():string|null
plan(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
plan(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startCreatePlanRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addPlan(builder:flatbuffers.Builder, planOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, planOffset, 0);
}

static endCreatePlanRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCreatePlanRequest(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, planOffset:flatbuffers.Offset):flatbuffers.Offset {
  CreatePlanRequest.startCreatePlanRequest(builder);
  CreatePlanRequest.addName(builder, nameOffset);
  CreatePlanRequest.addPlan(builder, planOffset);
  return CreatePlanRequest.endCreatePlanRequest(builder);
}
}
