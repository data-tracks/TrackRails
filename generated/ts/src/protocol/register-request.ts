// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Catalog } from '../protocol/catalog.js';


export class RegisterRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RegisterRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRegisterRequest(bb:flatbuffers.ByteBuffer, obj?:RegisterRequest):RegisterRequest {
  return (obj || new RegisterRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRegisterRequest(bb:flatbuffers.ByteBuffer, obj?:RegisterRequest):RegisterRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RegisterRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : null;
}

catalog(obj?:Catalog):Catalog|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Catalog()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startRegisterRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addId(builder:flatbuffers.Builder, id:bigint) {
  builder.addFieldInt64(0, id, null);
}

static addCatalog(builder:flatbuffers.Builder, catalogOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, catalogOffset, 0);
}

static endRegisterRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
