// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ValuesOrEvents, unionToValuesOrEvents, unionListToValuesOrEvents } from '../protocol/values-or-events.js';


export class TrainContent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TrainContent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTrainContent(bb:flatbuffers.ByteBuffer, obj?:TrainContent):TrainContent {
  return (obj || new TrainContent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTrainContent(bb:flatbuffers.ByteBuffer, obj?:TrainContent):TrainContent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TrainContent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

dataType():ValuesOrEvents {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ValuesOrEvents.NONE;
}

data<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startTrainContent(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addDataType(builder:flatbuffers.Builder, dataType:ValuesOrEvents) {
  builder.addFieldInt8(0, dataType, ValuesOrEvents.NONE);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dataOffset, 0);
}

static endTrainContent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 6) // data
  return offset;
}

static createTrainContent(builder:flatbuffers.Builder, dataType:ValuesOrEvents, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  TrainContent.startTrainContent(builder);
  TrainContent.addDataType(builder, dataType);
  TrainContent.addData(builder, dataOffset);
  return TrainContent.endTrainContent(builder);
}
}
