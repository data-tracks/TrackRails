// automatically generated by the FlatBuffers compiler, do not modify

package protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class KeyValueU64VecU64 extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static KeyValueU64VecU64 getRootAsKeyValueU64VecU64(ByteBuffer _bb) { return getRootAsKeyValueU64VecU64(_bb, new KeyValueU64VecU64()); }
  public static KeyValueU64VecU64 getRootAsKeyValueU64VecU64(ByteBuffer _bb, KeyValueU64VecU64 obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public KeyValueU64VecU64 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long key() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long value(int j) { int o = __offset(6); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int valueLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public LongVector valueVector() { return valueVector(new LongVector()); }
  public LongVector valueVector(LongVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer valueAsByteBuffer() { return __vector_as_bytebuffer(6, 8); }
  public ByteBuffer valueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 8); }

  public static int createKeyValueU64VecU64(FlatBufferBuilder builder,
      long key,
      int valueOffset) {
    builder.startTable(2);
    KeyValueU64VecU64.addKey(builder, key);
    KeyValueU64VecU64.addValue(builder, valueOffset);
    return KeyValueU64VecU64.endKeyValueU64VecU64(builder);
  }

  public static void startKeyValueU64VecU64(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addKey(FlatBufferBuilder builder, long key) { builder.addLong(0, key, 0L); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(1, valueOffset, 0); }
  public static int createValueVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startValueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endKeyValueU64VecU64(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public KeyValueU64VecU64 get(int j) { return get(new KeyValueU64VecU64(), j); }
    public KeyValueU64VecU64 get(KeyValueU64VecU64 obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

