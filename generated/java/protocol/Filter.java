// automatically generated by the FlatBuffers compiler, do not modify

package protocol;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Filter extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Filter getRootAsFilter(ByteBuffer _bb) { return getRootAsFilter(_bb, new Filter()); }
  public static Filter getRootAsFilter(ByteBuffer _bb, Filter obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Filter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte filterTypeType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table filterType(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createFilter(FlatBufferBuilder builder,
      byte filterTypeType,
      int filterTypeOffset) {
    builder.startTable(2);
    Filter.addFilterType(builder, filterTypeOffset);
    Filter.addFilterTypeType(builder, filterTypeType);
    return Filter.endFilter(builder);
  }

  public static void startFilter(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addFilterTypeType(FlatBufferBuilder builder, byte filterTypeType) { builder.addByte(0, filterTypeType, 0); }
  public static void addFilterType(FlatBufferBuilder builder, int filterTypeOffset) { builder.addOffset(1, filterTypeOffset, 0); }
  public static int endFilter(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Filter get(int j) { return get(new Filter(), j); }
    public Filter get(Filter obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

